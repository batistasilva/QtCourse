/* soapStub.h
   Generated by gSOAP 2.8.97 for calculator.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_tempuri	"http://tempuri.org/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20897
# error "GSOAP VERSION 20897 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _tempuri__Add;	/* calculator.h:142 */
class _tempuri__AddResponse;	/* calculator.h:144 */
class _tempuri__Subtract;	/* calculator.h:146 */
class _tempuri__SubtractResponse;	/* calculator.h:148 */
class _tempuri__Multiply;	/* calculator.h:150 */
class _tempuri__MultiplyResponse;	/* calculator.h:152 */
class _tempuri__Divide;	/* calculator.h:154 */
class _tempuri__DivideResponse;	/* calculator.h:156 */
struct __tempuri__Add;	/* calculator.h:515 */
struct __tempuri__Subtract;	/* calculator.h:585 */
struct __tempuri__Multiply;	/* calculator.h:655 */
struct __tempuri__Divide;	/* calculator.h:725 */
struct __tempuri__Add_;	/* calculator.h:796 */
struct __tempuri__Subtract_;	/* calculator.h:866 */
struct __tempuri__Multiply_;	/* calculator.h:936 */
struct __tempuri__Divide_;	/* calculator.h:1006 */

/* calculator.h:142 */
#ifndef SOAP_TYPE__tempuri__Add
#define SOAP_TYPE__tempuri__Add (7)
/* complex XML schema type 'tempuri:Add': */
class SOAP_CMAC _tempuri__Add {
      public:
        /// Required element 'tempuri:intA' of XML schema type 'xsd:int'
        int intA;
        /// Required element 'tempuri:intB' of XML schema type 'xsd:int'
        int intB;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__Add
        virtual long soap_type(void) const { return SOAP_TYPE__tempuri__Add; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__Add, default initialized and not managed by a soap context
        virtual _tempuri__Add *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tempuri__Add); }
      public:
        /// Constructor with default initializations
        _tempuri__Add() : intA(), intB(), soap() { }
        virtual ~_tempuri__Add() { }
        /// Friend allocator used by soap_new__tempuri__Add(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__Add * SOAP_FMAC2 soap_instantiate__tempuri__Add(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:144 */
#ifndef SOAP_TYPE__tempuri__AddResponse
#define SOAP_TYPE__tempuri__AddResponse (8)
/* complex XML schema type 'tempuri:AddResponse': */
class SOAP_CMAC _tempuri__AddResponse {
      public:
        /// Required element 'tempuri:AddResult' of XML schema type 'xsd:int'
        int AddResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__AddResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tempuri__AddResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__AddResponse, default initialized and not managed by a soap context
        virtual _tempuri__AddResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tempuri__AddResponse); }
      public:
        /// Constructor with default initializations
        _tempuri__AddResponse() : AddResult(), soap() { }
        virtual ~_tempuri__AddResponse() { }
        /// Friend allocator used by soap_new__tempuri__AddResponse(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__AddResponse * SOAP_FMAC2 soap_instantiate__tempuri__AddResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:146 */
#ifndef SOAP_TYPE__tempuri__Subtract
#define SOAP_TYPE__tempuri__Subtract (9)
/* complex XML schema type 'tempuri:Subtract': */
class SOAP_CMAC _tempuri__Subtract {
      public:
        /// Required element 'tempuri:intA' of XML schema type 'xsd:int'
        int intA;
        /// Required element 'tempuri:intB' of XML schema type 'xsd:int'
        int intB;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__Subtract
        virtual long soap_type(void) const { return SOAP_TYPE__tempuri__Subtract; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__Subtract, default initialized and not managed by a soap context
        virtual _tempuri__Subtract *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tempuri__Subtract); }
      public:
        /// Constructor with default initializations
        _tempuri__Subtract() : intA(), intB(), soap() { }
        virtual ~_tempuri__Subtract() { }
        /// Friend allocator used by soap_new__tempuri__Subtract(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__Subtract * SOAP_FMAC2 soap_instantiate__tempuri__Subtract(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:148 */
#ifndef SOAP_TYPE__tempuri__SubtractResponse
#define SOAP_TYPE__tempuri__SubtractResponse (10)
/* complex XML schema type 'tempuri:SubtractResponse': */
class SOAP_CMAC _tempuri__SubtractResponse {
      public:
        /// Required element 'tempuri:SubtractResult' of XML schema type 'xsd:int'
        int SubtractResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__SubtractResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tempuri__SubtractResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__SubtractResponse, default initialized and not managed by a soap context
        virtual _tempuri__SubtractResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tempuri__SubtractResponse); }
      public:
        /// Constructor with default initializations
        _tempuri__SubtractResponse() : SubtractResult(), soap() { }
        virtual ~_tempuri__SubtractResponse() { }
        /// Friend allocator used by soap_new__tempuri__SubtractResponse(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__SubtractResponse * SOAP_FMAC2 soap_instantiate__tempuri__SubtractResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:150 */
#ifndef SOAP_TYPE__tempuri__Multiply
#define SOAP_TYPE__tempuri__Multiply (11)
/* complex XML schema type 'tempuri:Multiply': */
class SOAP_CMAC _tempuri__Multiply {
      public:
        /// Required element 'tempuri:intA' of XML schema type 'xsd:int'
        int intA;
        /// Required element 'tempuri:intB' of XML schema type 'xsd:int'
        int intB;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__Multiply
        virtual long soap_type(void) const { return SOAP_TYPE__tempuri__Multiply; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__Multiply, default initialized and not managed by a soap context
        virtual _tempuri__Multiply *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tempuri__Multiply); }
      public:
        /// Constructor with default initializations
        _tempuri__Multiply() : intA(), intB(), soap() { }
        virtual ~_tempuri__Multiply() { }
        /// Friend allocator used by soap_new__tempuri__Multiply(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__Multiply * SOAP_FMAC2 soap_instantiate__tempuri__Multiply(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:152 */
#ifndef SOAP_TYPE__tempuri__MultiplyResponse
#define SOAP_TYPE__tempuri__MultiplyResponse (12)
/* complex XML schema type 'tempuri:MultiplyResponse': */
class SOAP_CMAC _tempuri__MultiplyResponse {
      public:
        /// Required element 'tempuri:MultiplyResult' of XML schema type 'xsd:int'
        int MultiplyResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__MultiplyResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tempuri__MultiplyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__MultiplyResponse, default initialized and not managed by a soap context
        virtual _tempuri__MultiplyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tempuri__MultiplyResponse); }
      public:
        /// Constructor with default initializations
        _tempuri__MultiplyResponse() : MultiplyResult(), soap() { }
        virtual ~_tempuri__MultiplyResponse() { }
        /// Friend allocator used by soap_new__tempuri__MultiplyResponse(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__MultiplyResponse * SOAP_FMAC2 soap_instantiate__tempuri__MultiplyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:154 */
#ifndef SOAP_TYPE__tempuri__Divide
#define SOAP_TYPE__tempuri__Divide (13)
/* complex XML schema type 'tempuri:Divide': */
class SOAP_CMAC _tempuri__Divide {
      public:
        /// Required element 'tempuri:intA' of XML schema type 'xsd:int'
        int intA;
        /// Required element 'tempuri:intB' of XML schema type 'xsd:int'
        int intB;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__Divide
        virtual long soap_type(void) const { return SOAP_TYPE__tempuri__Divide; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__Divide, default initialized and not managed by a soap context
        virtual _tempuri__Divide *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tempuri__Divide); }
      public:
        /// Constructor with default initializations
        _tempuri__Divide() : intA(), intB(), soap() { }
        virtual ~_tempuri__Divide() { }
        /// Friend allocator used by soap_new__tempuri__Divide(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__Divide * SOAP_FMAC2 soap_instantiate__tempuri__Divide(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:156 */
#ifndef SOAP_TYPE__tempuri__DivideResponse
#define SOAP_TYPE__tempuri__DivideResponse (14)
/* complex XML schema type 'tempuri:DivideResponse': */
class SOAP_CMAC _tempuri__DivideResponse {
      public:
        /// Required element 'tempuri:DivideResult' of XML schema type 'xsd:int'
        int DivideResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__DivideResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tempuri__DivideResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__DivideResponse, default initialized and not managed by a soap context
        virtual _tempuri__DivideResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tempuri__DivideResponse); }
      public:
        /// Constructor with default initializations
        _tempuri__DivideResponse() : DivideResult(), soap() { }
        virtual ~_tempuri__DivideResponse() { }
        /// Friend allocator used by soap_new__tempuri__DivideResponse(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__DivideResponse * SOAP_FMAC2 soap_instantiate__tempuri__DivideResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:515 */
#ifndef SOAP_TYPE___tempuri__Add
#define SOAP_TYPE___tempuri__Add (19)
/* Wrapper: */
struct SOAP_CMAC __tempuri__Add {
      public:
        /** Optional element 'tempuri:Add' of XML schema type 'tempuri:Add' */
        _tempuri__Add *tempuri__Add;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Add */
        long soap_type() const { return SOAP_TYPE___tempuri__Add; }
        /** Constructor with member initializations */
        __tempuri__Add() : tempuri__Add() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tempuri__Add * SOAP_FMAC2 soap_instantiate___tempuri__Add(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:585 */
#ifndef SOAP_TYPE___tempuri__Subtract
#define SOAP_TYPE___tempuri__Subtract (23)
/* Wrapper: */
struct SOAP_CMAC __tempuri__Subtract {
      public:
        /** Optional element 'tempuri:Subtract' of XML schema type 'tempuri:Subtract' */
        _tempuri__Subtract *tempuri__Subtract;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Subtract */
        long soap_type() const { return SOAP_TYPE___tempuri__Subtract; }
        /** Constructor with member initializations */
        __tempuri__Subtract() : tempuri__Subtract() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tempuri__Subtract * SOAP_FMAC2 soap_instantiate___tempuri__Subtract(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:655 */
#ifndef SOAP_TYPE___tempuri__Multiply
#define SOAP_TYPE___tempuri__Multiply (27)
/* Wrapper: */
struct SOAP_CMAC __tempuri__Multiply {
      public:
        /** Optional element 'tempuri:Multiply' of XML schema type 'tempuri:Multiply' */
        _tempuri__Multiply *tempuri__Multiply;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Multiply */
        long soap_type() const { return SOAP_TYPE___tempuri__Multiply; }
        /** Constructor with member initializations */
        __tempuri__Multiply() : tempuri__Multiply() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tempuri__Multiply * SOAP_FMAC2 soap_instantiate___tempuri__Multiply(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:725 */
#ifndef SOAP_TYPE___tempuri__Divide
#define SOAP_TYPE___tempuri__Divide (31)
/* Wrapper: */
struct SOAP_CMAC __tempuri__Divide {
      public:
        /** Optional element 'tempuri:Divide' of XML schema type 'tempuri:Divide' */
        _tempuri__Divide *tempuri__Divide;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Divide */
        long soap_type() const { return SOAP_TYPE___tempuri__Divide; }
        /** Constructor with member initializations */
        __tempuri__Divide() : tempuri__Divide() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tempuri__Divide * SOAP_FMAC2 soap_instantiate___tempuri__Divide(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:796 */
#ifndef SOAP_TYPE___tempuri__Add_
#define SOAP_TYPE___tempuri__Add_ (33)
/* Wrapper: */
struct SOAP_CMAC __tempuri__Add_ {
      public:
        /** Optional element 'tempuri:Add' of XML schema type 'tempuri:Add' */
        _tempuri__Add *tempuri__Add;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Add_ */
        long soap_type() const { return SOAP_TYPE___tempuri__Add_; }
        /** Constructor with member initializations */
        __tempuri__Add_() : tempuri__Add() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tempuri__Add_ * SOAP_FMAC2 soap_instantiate___tempuri__Add_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:866 */
#ifndef SOAP_TYPE___tempuri__Subtract_
#define SOAP_TYPE___tempuri__Subtract_ (35)
/* Wrapper: */
struct SOAP_CMAC __tempuri__Subtract_ {
      public:
        /** Optional element 'tempuri:Subtract' of XML schema type 'tempuri:Subtract' */
        _tempuri__Subtract *tempuri__Subtract;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Subtract_ */
        long soap_type() const { return SOAP_TYPE___tempuri__Subtract_; }
        /** Constructor with member initializations */
        __tempuri__Subtract_() : tempuri__Subtract() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tempuri__Subtract_ * SOAP_FMAC2 soap_instantiate___tempuri__Subtract_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:936 */
#ifndef SOAP_TYPE___tempuri__Multiply_
#define SOAP_TYPE___tempuri__Multiply_ (37)
/* Wrapper: */
struct SOAP_CMAC __tempuri__Multiply_ {
      public:
        /** Optional element 'tempuri:Multiply' of XML schema type 'tempuri:Multiply' */
        _tempuri__Multiply *tempuri__Multiply;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Multiply_ */
        long soap_type() const { return SOAP_TYPE___tempuri__Multiply_; }
        /** Constructor with member initializations */
        __tempuri__Multiply_() : tempuri__Multiply() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tempuri__Multiply_ * SOAP_FMAC2 soap_instantiate___tempuri__Multiply_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:1006 */
#ifndef SOAP_TYPE___tempuri__Divide_
#define SOAP_TYPE___tempuri__Divide_ (39)
/* Wrapper: */
struct SOAP_CMAC __tempuri__Divide_ {
      public:
        /** Optional element 'tempuri:Divide' of XML schema type 'tempuri:Divide' */
        _tempuri__Divide *tempuri__Divide;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Divide_ */
        long soap_type() const { return SOAP_TYPE___tempuri__Divide_; }
        /** Constructor with member initializations */
        __tempuri__Divide_() : tempuri__Divide() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tempuri__Divide_ * SOAP_FMAC2 soap_instantiate___tempuri__Divide_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calculator.h:1187 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (40)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* calculator.h:1187 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (41)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* calculator.h:1187 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (43)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* calculator.h:1187 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (46)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* calculator.h:1187 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (47)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _tempuri__DivideResponse has binding name '_tempuri__DivideResponse' for type '' */
#ifndef SOAP_TYPE__tempuri__DivideResponse
#define SOAP_TYPE__tempuri__DivideResponse (14)
#endif

/* _tempuri__Divide has binding name '_tempuri__Divide' for type '' */
#ifndef SOAP_TYPE__tempuri__Divide
#define SOAP_TYPE__tempuri__Divide (13)
#endif

/* _tempuri__MultiplyResponse has binding name '_tempuri__MultiplyResponse' for type '' */
#ifndef SOAP_TYPE__tempuri__MultiplyResponse
#define SOAP_TYPE__tempuri__MultiplyResponse (12)
#endif

/* _tempuri__Multiply has binding name '_tempuri__Multiply' for type '' */
#ifndef SOAP_TYPE__tempuri__Multiply
#define SOAP_TYPE__tempuri__Multiply (11)
#endif

/* _tempuri__SubtractResponse has binding name '_tempuri__SubtractResponse' for type '' */
#ifndef SOAP_TYPE__tempuri__SubtractResponse
#define SOAP_TYPE__tempuri__SubtractResponse (10)
#endif

/* _tempuri__Subtract has binding name '_tempuri__Subtract' for type '' */
#ifndef SOAP_TYPE__tempuri__Subtract
#define SOAP_TYPE__tempuri__Subtract (9)
#endif

/* _tempuri__AddResponse has binding name '_tempuri__AddResponse' for type '' */
#ifndef SOAP_TYPE__tempuri__AddResponse
#define SOAP_TYPE__tempuri__AddResponse (8)
#endif

/* _tempuri__Add has binding name '_tempuri__Add' for type '' */
#ifndef SOAP_TYPE__tempuri__Add
#define SOAP_TYPE__tempuri__Add (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (47)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (46)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (43)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (41)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (40)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (49)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (48)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (42)
#endif

/* _tempuri__Divide * has binding name 'PointerTo_tempuri__Divide' for type '' */
#ifndef SOAP_TYPE_PointerTo_tempuri__Divide
#define SOAP_TYPE_PointerTo_tempuri__Divide (28)
#endif

/* _tempuri__Multiply * has binding name 'PointerTo_tempuri__Multiply' for type '' */
#ifndef SOAP_TYPE_PointerTo_tempuri__Multiply
#define SOAP_TYPE_PointerTo_tempuri__Multiply (24)
#endif

/* _tempuri__Subtract * has binding name 'PointerTo_tempuri__Subtract' for type '' */
#ifndef SOAP_TYPE_PointerTo_tempuri__Subtract
#define SOAP_TYPE_PointerTo_tempuri__Subtract (20)
#endif

/* _tempuri__Add * has binding name 'PointerTo_tempuri__Add' for type '' */
#ifndef SOAP_TYPE_PointerTo_tempuri__Add
#define SOAP_TYPE_PointerTo_tempuri__Add (16)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
