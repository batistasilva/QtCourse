/* soapH.h
   Generated by gSOAP 2.8.97 for calculator.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__DivideResponse_DEFINED
#define SOAP_TYPE__tempuri__DivideResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__DivideResponse(struct soap*, const char*, int, const _tempuri__DivideResponse *, const char*);
SOAP_FMAC3 _tempuri__DivideResponse * SOAP_FMAC4 soap_in__tempuri__DivideResponse(struct soap*, const char*, _tempuri__DivideResponse *, const char*);
SOAP_FMAC1 _tempuri__DivideResponse * SOAP_FMAC2 soap_instantiate__tempuri__DivideResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__DivideResponse * soap_new__tempuri__DivideResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__DivideResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__DivideResponse * soap_new_req__tempuri__DivideResponse(
	struct soap *soap,
	int DivideResult)
{
	_tempuri__DivideResponse *_p = ::soap_new__tempuri__DivideResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__DivideResponse::DivideResult = DivideResult;
	}
	return _p;
}

inline _tempuri__DivideResponse * soap_new_set__tempuri__DivideResponse(
	struct soap *soap,
	int DivideResult)
{
	_tempuri__DivideResponse *_p = ::soap_new__tempuri__DivideResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__DivideResponse::DivideResult = DivideResult;
	}
	return _p;
}

inline int soap_write__tempuri__DivideResponse(struct soap *soap, _tempuri__DivideResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DivideResponse", p->soap_type() == SOAP_TYPE__tempuri__DivideResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__DivideResponse(struct soap *soap, const char *URL, _tempuri__DivideResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DivideResponse", p->soap_type() == SOAP_TYPE__tempuri__DivideResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__DivideResponse(struct soap *soap, const char *URL, _tempuri__DivideResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DivideResponse", p->soap_type() == SOAP_TYPE__tempuri__DivideResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__DivideResponse(struct soap *soap, const char *URL, _tempuri__DivideResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DivideResponse", p->soap_type() == SOAP_TYPE__tempuri__DivideResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__DivideResponse * SOAP_FMAC4 soap_get__tempuri__DivideResponse(struct soap*, _tempuri__DivideResponse *, const char*, const char*);

inline int soap_read__tempuri__DivideResponse(struct soap *soap, _tempuri__DivideResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__DivideResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__DivideResponse(struct soap *soap, const char *URL, _tempuri__DivideResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__DivideResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__DivideResponse(struct soap *soap, _tempuri__DivideResponse *p)
{
	if (::soap_read__tempuri__DivideResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__Divide_DEFINED
#define SOAP_TYPE__tempuri__Divide_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Divide(struct soap*, const char*, int, const _tempuri__Divide *, const char*);
SOAP_FMAC3 _tempuri__Divide * SOAP_FMAC4 soap_in__tempuri__Divide(struct soap*, const char*, _tempuri__Divide *, const char*);
SOAP_FMAC1 _tempuri__Divide * SOAP_FMAC2 soap_instantiate__tempuri__Divide(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__Divide * soap_new__tempuri__Divide(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__Divide(soap, n, NULL, NULL, NULL);
}

inline _tempuri__Divide * soap_new_req__tempuri__Divide(
	struct soap *soap,
	int intA,
	int intB)
{
	_tempuri__Divide *_p = ::soap_new__tempuri__Divide(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Divide::intA = intA;
		_p->_tempuri__Divide::intB = intB;
	}
	return _p;
}

inline _tempuri__Divide * soap_new_set__tempuri__Divide(
	struct soap *soap,
	int intA,
	int intB)
{
	_tempuri__Divide *_p = ::soap_new__tempuri__Divide(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Divide::intA = intA;
		_p->_tempuri__Divide::intB = intB;
	}
	return _p;
}

inline int soap_write__tempuri__Divide(struct soap *soap, _tempuri__Divide const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Divide", p->soap_type() == SOAP_TYPE__tempuri__Divide ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__Divide(struct soap *soap, const char *URL, _tempuri__Divide const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Divide", p->soap_type() == SOAP_TYPE__tempuri__Divide ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__Divide(struct soap *soap, const char *URL, _tempuri__Divide const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Divide", p->soap_type() == SOAP_TYPE__tempuri__Divide ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__Divide(struct soap *soap, const char *URL, _tempuri__Divide const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Divide", p->soap_type() == SOAP_TYPE__tempuri__Divide ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__Divide * SOAP_FMAC4 soap_get__tempuri__Divide(struct soap*, _tempuri__Divide *, const char*, const char*);

inline int soap_read__tempuri__Divide(struct soap *soap, _tempuri__Divide *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__Divide(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__Divide(struct soap *soap, const char *URL, _tempuri__Divide *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__Divide(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__Divide(struct soap *soap, _tempuri__Divide *p)
{
	if (::soap_read__tempuri__Divide(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__MultiplyResponse_DEFINED
#define SOAP_TYPE__tempuri__MultiplyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__MultiplyResponse(struct soap*, const char*, int, const _tempuri__MultiplyResponse *, const char*);
SOAP_FMAC3 _tempuri__MultiplyResponse * SOAP_FMAC4 soap_in__tempuri__MultiplyResponse(struct soap*, const char*, _tempuri__MultiplyResponse *, const char*);
SOAP_FMAC1 _tempuri__MultiplyResponse * SOAP_FMAC2 soap_instantiate__tempuri__MultiplyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__MultiplyResponse * soap_new__tempuri__MultiplyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__MultiplyResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__MultiplyResponse * soap_new_req__tempuri__MultiplyResponse(
	struct soap *soap,
	int MultiplyResult)
{
	_tempuri__MultiplyResponse *_p = ::soap_new__tempuri__MultiplyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__MultiplyResponse::MultiplyResult = MultiplyResult;
	}
	return _p;
}

inline _tempuri__MultiplyResponse * soap_new_set__tempuri__MultiplyResponse(
	struct soap *soap,
	int MultiplyResult)
{
	_tempuri__MultiplyResponse *_p = ::soap_new__tempuri__MultiplyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__MultiplyResponse::MultiplyResult = MultiplyResult;
	}
	return _p;
}

inline int soap_write__tempuri__MultiplyResponse(struct soap *soap, _tempuri__MultiplyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MultiplyResponse", p->soap_type() == SOAP_TYPE__tempuri__MultiplyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__MultiplyResponse(struct soap *soap, const char *URL, _tempuri__MultiplyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MultiplyResponse", p->soap_type() == SOAP_TYPE__tempuri__MultiplyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__MultiplyResponse(struct soap *soap, const char *URL, _tempuri__MultiplyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MultiplyResponse", p->soap_type() == SOAP_TYPE__tempuri__MultiplyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__MultiplyResponse(struct soap *soap, const char *URL, _tempuri__MultiplyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MultiplyResponse", p->soap_type() == SOAP_TYPE__tempuri__MultiplyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__MultiplyResponse * SOAP_FMAC4 soap_get__tempuri__MultiplyResponse(struct soap*, _tempuri__MultiplyResponse *, const char*, const char*);

inline int soap_read__tempuri__MultiplyResponse(struct soap *soap, _tempuri__MultiplyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__MultiplyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__MultiplyResponse(struct soap *soap, const char *URL, _tempuri__MultiplyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__MultiplyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__MultiplyResponse(struct soap *soap, _tempuri__MultiplyResponse *p)
{
	if (::soap_read__tempuri__MultiplyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__Multiply_DEFINED
#define SOAP_TYPE__tempuri__Multiply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Multiply(struct soap*, const char*, int, const _tempuri__Multiply *, const char*);
SOAP_FMAC3 _tempuri__Multiply * SOAP_FMAC4 soap_in__tempuri__Multiply(struct soap*, const char*, _tempuri__Multiply *, const char*);
SOAP_FMAC1 _tempuri__Multiply * SOAP_FMAC2 soap_instantiate__tempuri__Multiply(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__Multiply * soap_new__tempuri__Multiply(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__Multiply(soap, n, NULL, NULL, NULL);
}

inline _tempuri__Multiply * soap_new_req__tempuri__Multiply(
	struct soap *soap,
	int intA,
	int intB)
{
	_tempuri__Multiply *_p = ::soap_new__tempuri__Multiply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Multiply::intA = intA;
		_p->_tempuri__Multiply::intB = intB;
	}
	return _p;
}

inline _tempuri__Multiply * soap_new_set__tempuri__Multiply(
	struct soap *soap,
	int intA,
	int intB)
{
	_tempuri__Multiply *_p = ::soap_new__tempuri__Multiply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Multiply::intA = intA;
		_p->_tempuri__Multiply::intB = intB;
	}
	return _p;
}

inline int soap_write__tempuri__Multiply(struct soap *soap, _tempuri__Multiply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Multiply", p->soap_type() == SOAP_TYPE__tempuri__Multiply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__Multiply(struct soap *soap, const char *URL, _tempuri__Multiply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Multiply", p->soap_type() == SOAP_TYPE__tempuri__Multiply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__Multiply(struct soap *soap, const char *URL, _tempuri__Multiply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Multiply", p->soap_type() == SOAP_TYPE__tempuri__Multiply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__Multiply(struct soap *soap, const char *URL, _tempuri__Multiply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Multiply", p->soap_type() == SOAP_TYPE__tempuri__Multiply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__Multiply * SOAP_FMAC4 soap_get__tempuri__Multiply(struct soap*, _tempuri__Multiply *, const char*, const char*);

inline int soap_read__tempuri__Multiply(struct soap *soap, _tempuri__Multiply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__Multiply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__Multiply(struct soap *soap, const char *URL, _tempuri__Multiply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__Multiply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__Multiply(struct soap *soap, _tempuri__Multiply *p)
{
	if (::soap_read__tempuri__Multiply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SubtractResponse_DEFINED
#define SOAP_TYPE__tempuri__SubtractResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SubtractResponse(struct soap*, const char*, int, const _tempuri__SubtractResponse *, const char*);
SOAP_FMAC3 _tempuri__SubtractResponse * SOAP_FMAC4 soap_in__tempuri__SubtractResponse(struct soap*, const char*, _tempuri__SubtractResponse *, const char*);
SOAP_FMAC1 _tempuri__SubtractResponse * SOAP_FMAC2 soap_instantiate__tempuri__SubtractResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SubtractResponse * soap_new__tempuri__SubtractResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SubtractResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SubtractResponse * soap_new_req__tempuri__SubtractResponse(
	struct soap *soap,
	int SubtractResult)
{
	_tempuri__SubtractResponse *_p = ::soap_new__tempuri__SubtractResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SubtractResponse::SubtractResult = SubtractResult;
	}
	return _p;
}

inline _tempuri__SubtractResponse * soap_new_set__tempuri__SubtractResponse(
	struct soap *soap,
	int SubtractResult)
{
	_tempuri__SubtractResponse *_p = ::soap_new__tempuri__SubtractResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SubtractResponse::SubtractResult = SubtractResult;
	}
	return _p;
}

inline int soap_write__tempuri__SubtractResponse(struct soap *soap, _tempuri__SubtractResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SubtractResponse", p->soap_type() == SOAP_TYPE__tempuri__SubtractResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SubtractResponse(struct soap *soap, const char *URL, _tempuri__SubtractResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SubtractResponse", p->soap_type() == SOAP_TYPE__tempuri__SubtractResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SubtractResponse(struct soap *soap, const char *URL, _tempuri__SubtractResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SubtractResponse", p->soap_type() == SOAP_TYPE__tempuri__SubtractResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SubtractResponse(struct soap *soap, const char *URL, _tempuri__SubtractResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SubtractResponse", p->soap_type() == SOAP_TYPE__tempuri__SubtractResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SubtractResponse * SOAP_FMAC4 soap_get__tempuri__SubtractResponse(struct soap*, _tempuri__SubtractResponse *, const char*, const char*);

inline int soap_read__tempuri__SubtractResponse(struct soap *soap, _tempuri__SubtractResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SubtractResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SubtractResponse(struct soap *soap, const char *URL, _tempuri__SubtractResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SubtractResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SubtractResponse(struct soap *soap, _tempuri__SubtractResponse *p)
{
	if (::soap_read__tempuri__SubtractResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__Subtract_DEFINED
#define SOAP_TYPE__tempuri__Subtract_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Subtract(struct soap*, const char*, int, const _tempuri__Subtract *, const char*);
SOAP_FMAC3 _tempuri__Subtract * SOAP_FMAC4 soap_in__tempuri__Subtract(struct soap*, const char*, _tempuri__Subtract *, const char*);
SOAP_FMAC1 _tempuri__Subtract * SOAP_FMAC2 soap_instantiate__tempuri__Subtract(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__Subtract * soap_new__tempuri__Subtract(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__Subtract(soap, n, NULL, NULL, NULL);
}

inline _tempuri__Subtract * soap_new_req__tempuri__Subtract(
	struct soap *soap,
	int intA,
	int intB)
{
	_tempuri__Subtract *_p = ::soap_new__tempuri__Subtract(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Subtract::intA = intA;
		_p->_tempuri__Subtract::intB = intB;
	}
	return _p;
}

inline _tempuri__Subtract * soap_new_set__tempuri__Subtract(
	struct soap *soap,
	int intA,
	int intB)
{
	_tempuri__Subtract *_p = ::soap_new__tempuri__Subtract(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Subtract::intA = intA;
		_p->_tempuri__Subtract::intB = intB;
	}
	return _p;
}

inline int soap_write__tempuri__Subtract(struct soap *soap, _tempuri__Subtract const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Subtract", p->soap_type() == SOAP_TYPE__tempuri__Subtract ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__Subtract(struct soap *soap, const char *URL, _tempuri__Subtract const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Subtract", p->soap_type() == SOAP_TYPE__tempuri__Subtract ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__Subtract(struct soap *soap, const char *URL, _tempuri__Subtract const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Subtract", p->soap_type() == SOAP_TYPE__tempuri__Subtract ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__Subtract(struct soap *soap, const char *URL, _tempuri__Subtract const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Subtract", p->soap_type() == SOAP_TYPE__tempuri__Subtract ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__Subtract * SOAP_FMAC4 soap_get__tempuri__Subtract(struct soap*, _tempuri__Subtract *, const char*, const char*);

inline int soap_read__tempuri__Subtract(struct soap *soap, _tempuri__Subtract *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__Subtract(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__Subtract(struct soap *soap, const char *URL, _tempuri__Subtract *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__Subtract(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__Subtract(struct soap *soap, _tempuri__Subtract *p)
{
	if (::soap_read__tempuri__Subtract(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__AddResponse_DEFINED
#define SOAP_TYPE__tempuri__AddResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AddResponse(struct soap*, const char*, int, const _tempuri__AddResponse *, const char*);
SOAP_FMAC3 _tempuri__AddResponse * SOAP_FMAC4 soap_in__tempuri__AddResponse(struct soap*, const char*, _tempuri__AddResponse *, const char*);
SOAP_FMAC1 _tempuri__AddResponse * SOAP_FMAC2 soap_instantiate__tempuri__AddResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AddResponse * soap_new__tempuri__AddResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AddResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AddResponse * soap_new_req__tempuri__AddResponse(
	struct soap *soap,
	int AddResult)
{
	_tempuri__AddResponse *_p = ::soap_new__tempuri__AddResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AddResponse::AddResult = AddResult;
	}
	return _p;
}

inline _tempuri__AddResponse * soap_new_set__tempuri__AddResponse(
	struct soap *soap,
	int AddResult)
{
	_tempuri__AddResponse *_p = ::soap_new__tempuri__AddResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AddResponse::AddResult = AddResult;
	}
	return _p;
}

inline int soap_write__tempuri__AddResponse(struct soap *soap, _tempuri__AddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AddResponse", p->soap_type() == SOAP_TYPE__tempuri__AddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AddResponse(struct soap *soap, const char *URL, _tempuri__AddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AddResponse", p->soap_type() == SOAP_TYPE__tempuri__AddResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__AddResponse(struct soap *soap, const char *URL, _tempuri__AddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AddResponse", p->soap_type() == SOAP_TYPE__tempuri__AddResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AddResponse(struct soap *soap, const char *URL, _tempuri__AddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AddResponse", p->soap_type() == SOAP_TYPE__tempuri__AddResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AddResponse * SOAP_FMAC4 soap_get__tempuri__AddResponse(struct soap*, _tempuri__AddResponse *, const char*, const char*);

inline int soap_read__tempuri__AddResponse(struct soap *soap, _tempuri__AddResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__AddResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AddResponse(struct soap *soap, const char *URL, _tempuri__AddResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__AddResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__AddResponse(struct soap *soap, _tempuri__AddResponse *p)
{
	if (::soap_read__tempuri__AddResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__Add_DEFINED
#define SOAP_TYPE__tempuri__Add_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Add(struct soap*, const char*, int, const _tempuri__Add *, const char*);
SOAP_FMAC3 _tempuri__Add * SOAP_FMAC4 soap_in__tempuri__Add(struct soap*, const char*, _tempuri__Add *, const char*);
SOAP_FMAC1 _tempuri__Add * SOAP_FMAC2 soap_instantiate__tempuri__Add(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__Add * soap_new__tempuri__Add(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__Add(soap, n, NULL, NULL, NULL);
}

inline _tempuri__Add * soap_new_req__tempuri__Add(
	struct soap *soap,
	int intA,
	int intB)
{
	_tempuri__Add *_p = ::soap_new__tempuri__Add(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Add::intA = intA;
		_p->_tempuri__Add::intB = intB;
	}
	return _p;
}

inline _tempuri__Add * soap_new_set__tempuri__Add(
	struct soap *soap,
	int intA,
	int intB)
{
	_tempuri__Add *_p = ::soap_new__tempuri__Add(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Add::intA = intA;
		_p->_tempuri__Add::intB = intB;
	}
	return _p;
}

inline int soap_write__tempuri__Add(struct soap *soap, _tempuri__Add const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Add", p->soap_type() == SOAP_TYPE__tempuri__Add ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__Add(struct soap *soap, const char *URL, _tempuri__Add const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Add", p->soap_type() == SOAP_TYPE__tempuri__Add ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__Add(struct soap *soap, const char *URL, _tempuri__Add const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Add", p->soap_type() == SOAP_TYPE__tempuri__Add ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__Add(struct soap *soap, const char *URL, _tempuri__Add const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Add", p->soap_type() == SOAP_TYPE__tempuri__Add ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__Add * SOAP_FMAC4 soap_get__tempuri__Add(struct soap*, _tempuri__Add *, const char*, const char*);

inline int soap_read__tempuri__Add(struct soap *soap, _tempuri__Add *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__Add(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__Add(struct soap *soap, const char *URL, _tempuri__Add *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__Add(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__Add(struct soap *soap, _tempuri__Add *p)
{
	if (::soap_read__tempuri__Add(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___tempuri__Divide__DEFINED
#define SOAP_TYPE___tempuri__Divide__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Divide_(struct soap*, struct __tempuri__Divide_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Divide_(struct soap*, const struct __tempuri__Divide_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Divide_(struct soap*, const char*, int, const struct __tempuri__Divide_ *, const char*);
SOAP_FMAC3 struct __tempuri__Divide_ * SOAP_FMAC4 soap_in___tempuri__Divide_(struct soap*, const char*, struct __tempuri__Divide_ *, const char*);
SOAP_FMAC1 struct __tempuri__Divide_ * SOAP_FMAC2 soap_instantiate___tempuri__Divide_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Divide_ * soap_new___tempuri__Divide_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Divide_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Divide_ * soap_new_req___tempuri__Divide_(
	struct soap *soap)
{
	struct __tempuri__Divide_ *_p = ::soap_new___tempuri__Divide_(soap);
	if (_p)
	{	::soap_default___tempuri__Divide_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Divide_ * soap_new_set___tempuri__Divide_(
	struct soap *soap,
	_tempuri__Divide *tempuri__Divide)
{
	struct __tempuri__Divide_ *_p = ::soap_new___tempuri__Divide_(soap);
	if (_p)
	{	::soap_default___tempuri__Divide_(soap, _p);
		_p->tempuri__Divide = tempuri__Divide;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Divide_(struct soap*, const struct __tempuri__Divide_ *, const char*, const char*);

inline int soap_write___tempuri__Divide_(struct soap *soap, struct __tempuri__Divide_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__Divide_(soap, p), 0) || ::soap_put___tempuri__Divide_(soap, p, "-tempuri:Divide", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Divide_(struct soap *soap, const char *URL, struct __tempuri__Divide_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Divide_(soap, p), 0) || ::soap_put___tempuri__Divide_(soap, p, "-tempuri:Divide", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__Divide_(struct soap *soap, const char *URL, struct __tempuri__Divide_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Divide_(soap, p), 0) || ::soap_put___tempuri__Divide_(soap, p, "-tempuri:Divide", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Divide_(struct soap *soap, const char *URL, struct __tempuri__Divide_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Divide_(soap, p), 0) || ::soap_put___tempuri__Divide_(soap, p, "-tempuri:Divide", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Divide_ * SOAP_FMAC4 soap_get___tempuri__Divide_(struct soap*, struct __tempuri__Divide_ *, const char*, const char*);

inline int soap_read___tempuri__Divide_(struct soap *soap, struct __tempuri__Divide_ *p)
{
	if (p)
	{	::soap_default___tempuri__Divide_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__Divide_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Divide_(struct soap *soap, const char *URL, struct __tempuri__Divide_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__Divide_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__Divide_(struct soap *soap, struct __tempuri__Divide_ *p)
{
	if (::soap_read___tempuri__Divide_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__Multiply__DEFINED
#define SOAP_TYPE___tempuri__Multiply__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Multiply_(struct soap*, struct __tempuri__Multiply_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Multiply_(struct soap*, const struct __tempuri__Multiply_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Multiply_(struct soap*, const char*, int, const struct __tempuri__Multiply_ *, const char*);
SOAP_FMAC3 struct __tempuri__Multiply_ * SOAP_FMAC4 soap_in___tempuri__Multiply_(struct soap*, const char*, struct __tempuri__Multiply_ *, const char*);
SOAP_FMAC1 struct __tempuri__Multiply_ * SOAP_FMAC2 soap_instantiate___tempuri__Multiply_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Multiply_ * soap_new___tempuri__Multiply_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Multiply_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Multiply_ * soap_new_req___tempuri__Multiply_(
	struct soap *soap)
{
	struct __tempuri__Multiply_ *_p = ::soap_new___tempuri__Multiply_(soap);
	if (_p)
	{	::soap_default___tempuri__Multiply_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Multiply_ * soap_new_set___tempuri__Multiply_(
	struct soap *soap,
	_tempuri__Multiply *tempuri__Multiply)
{
	struct __tempuri__Multiply_ *_p = ::soap_new___tempuri__Multiply_(soap);
	if (_p)
	{	::soap_default___tempuri__Multiply_(soap, _p);
		_p->tempuri__Multiply = tempuri__Multiply;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Multiply_(struct soap*, const struct __tempuri__Multiply_ *, const char*, const char*);

inline int soap_write___tempuri__Multiply_(struct soap *soap, struct __tempuri__Multiply_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__Multiply_(soap, p), 0) || ::soap_put___tempuri__Multiply_(soap, p, "-tempuri:Multiply", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Multiply_(struct soap *soap, const char *URL, struct __tempuri__Multiply_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Multiply_(soap, p), 0) || ::soap_put___tempuri__Multiply_(soap, p, "-tempuri:Multiply", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__Multiply_(struct soap *soap, const char *URL, struct __tempuri__Multiply_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Multiply_(soap, p), 0) || ::soap_put___tempuri__Multiply_(soap, p, "-tempuri:Multiply", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Multiply_(struct soap *soap, const char *URL, struct __tempuri__Multiply_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Multiply_(soap, p), 0) || ::soap_put___tempuri__Multiply_(soap, p, "-tempuri:Multiply", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Multiply_ * SOAP_FMAC4 soap_get___tempuri__Multiply_(struct soap*, struct __tempuri__Multiply_ *, const char*, const char*);

inline int soap_read___tempuri__Multiply_(struct soap *soap, struct __tempuri__Multiply_ *p)
{
	if (p)
	{	::soap_default___tempuri__Multiply_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__Multiply_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Multiply_(struct soap *soap, const char *URL, struct __tempuri__Multiply_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__Multiply_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__Multiply_(struct soap *soap, struct __tempuri__Multiply_ *p)
{
	if (::soap_read___tempuri__Multiply_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__Subtract__DEFINED
#define SOAP_TYPE___tempuri__Subtract__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Subtract_(struct soap*, struct __tempuri__Subtract_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Subtract_(struct soap*, const struct __tempuri__Subtract_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Subtract_(struct soap*, const char*, int, const struct __tempuri__Subtract_ *, const char*);
SOAP_FMAC3 struct __tempuri__Subtract_ * SOAP_FMAC4 soap_in___tempuri__Subtract_(struct soap*, const char*, struct __tempuri__Subtract_ *, const char*);
SOAP_FMAC1 struct __tempuri__Subtract_ * SOAP_FMAC2 soap_instantiate___tempuri__Subtract_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Subtract_ * soap_new___tempuri__Subtract_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Subtract_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Subtract_ * soap_new_req___tempuri__Subtract_(
	struct soap *soap)
{
	struct __tempuri__Subtract_ *_p = ::soap_new___tempuri__Subtract_(soap);
	if (_p)
	{	::soap_default___tempuri__Subtract_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Subtract_ * soap_new_set___tempuri__Subtract_(
	struct soap *soap,
	_tempuri__Subtract *tempuri__Subtract)
{
	struct __tempuri__Subtract_ *_p = ::soap_new___tempuri__Subtract_(soap);
	if (_p)
	{	::soap_default___tempuri__Subtract_(soap, _p);
		_p->tempuri__Subtract = tempuri__Subtract;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Subtract_(struct soap*, const struct __tempuri__Subtract_ *, const char*, const char*);

inline int soap_write___tempuri__Subtract_(struct soap *soap, struct __tempuri__Subtract_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__Subtract_(soap, p), 0) || ::soap_put___tempuri__Subtract_(soap, p, "-tempuri:Subtract", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Subtract_(struct soap *soap, const char *URL, struct __tempuri__Subtract_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Subtract_(soap, p), 0) || ::soap_put___tempuri__Subtract_(soap, p, "-tempuri:Subtract", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__Subtract_(struct soap *soap, const char *URL, struct __tempuri__Subtract_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Subtract_(soap, p), 0) || ::soap_put___tempuri__Subtract_(soap, p, "-tempuri:Subtract", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Subtract_(struct soap *soap, const char *URL, struct __tempuri__Subtract_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Subtract_(soap, p), 0) || ::soap_put___tempuri__Subtract_(soap, p, "-tempuri:Subtract", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Subtract_ * SOAP_FMAC4 soap_get___tempuri__Subtract_(struct soap*, struct __tempuri__Subtract_ *, const char*, const char*);

inline int soap_read___tempuri__Subtract_(struct soap *soap, struct __tempuri__Subtract_ *p)
{
	if (p)
	{	::soap_default___tempuri__Subtract_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__Subtract_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Subtract_(struct soap *soap, const char *URL, struct __tempuri__Subtract_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__Subtract_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__Subtract_(struct soap *soap, struct __tempuri__Subtract_ *p)
{
	if (::soap_read___tempuri__Subtract_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__Add__DEFINED
#define SOAP_TYPE___tempuri__Add__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Add_(struct soap*, struct __tempuri__Add_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Add_(struct soap*, const struct __tempuri__Add_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Add_(struct soap*, const char*, int, const struct __tempuri__Add_ *, const char*);
SOAP_FMAC3 struct __tempuri__Add_ * SOAP_FMAC4 soap_in___tempuri__Add_(struct soap*, const char*, struct __tempuri__Add_ *, const char*);
SOAP_FMAC1 struct __tempuri__Add_ * SOAP_FMAC2 soap_instantiate___tempuri__Add_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Add_ * soap_new___tempuri__Add_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Add_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Add_ * soap_new_req___tempuri__Add_(
	struct soap *soap)
{
	struct __tempuri__Add_ *_p = ::soap_new___tempuri__Add_(soap);
	if (_p)
	{	::soap_default___tempuri__Add_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Add_ * soap_new_set___tempuri__Add_(
	struct soap *soap,
	_tempuri__Add *tempuri__Add)
{
	struct __tempuri__Add_ *_p = ::soap_new___tempuri__Add_(soap);
	if (_p)
	{	::soap_default___tempuri__Add_(soap, _p);
		_p->tempuri__Add = tempuri__Add;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Add_(struct soap*, const struct __tempuri__Add_ *, const char*, const char*);

inline int soap_write___tempuri__Add_(struct soap *soap, struct __tempuri__Add_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__Add_(soap, p), 0) || ::soap_put___tempuri__Add_(soap, p, "-tempuri:Add", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Add_(struct soap *soap, const char *URL, struct __tempuri__Add_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Add_(soap, p), 0) || ::soap_put___tempuri__Add_(soap, p, "-tempuri:Add", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__Add_(struct soap *soap, const char *URL, struct __tempuri__Add_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Add_(soap, p), 0) || ::soap_put___tempuri__Add_(soap, p, "-tempuri:Add", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Add_(struct soap *soap, const char *URL, struct __tempuri__Add_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Add_(soap, p), 0) || ::soap_put___tempuri__Add_(soap, p, "-tempuri:Add", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Add_ * SOAP_FMAC4 soap_get___tempuri__Add_(struct soap*, struct __tempuri__Add_ *, const char*, const char*);

inline int soap_read___tempuri__Add_(struct soap *soap, struct __tempuri__Add_ *p)
{
	if (p)
	{	::soap_default___tempuri__Add_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__Add_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Add_(struct soap *soap, const char *URL, struct __tempuri__Add_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__Add_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__Add_(struct soap *soap, struct __tempuri__Add_ *p)
{
	if (::soap_read___tempuri__Add_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__Divide_DEFINED
#define SOAP_TYPE___tempuri__Divide_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Divide(struct soap*, struct __tempuri__Divide *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Divide(struct soap*, const struct __tempuri__Divide *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Divide(struct soap*, const char*, int, const struct __tempuri__Divide *, const char*);
SOAP_FMAC3 struct __tempuri__Divide * SOAP_FMAC4 soap_in___tempuri__Divide(struct soap*, const char*, struct __tempuri__Divide *, const char*);
SOAP_FMAC1 struct __tempuri__Divide * SOAP_FMAC2 soap_instantiate___tempuri__Divide(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Divide * soap_new___tempuri__Divide(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Divide(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Divide * soap_new_req___tempuri__Divide(
	struct soap *soap)
{
	struct __tempuri__Divide *_p = ::soap_new___tempuri__Divide(soap);
	if (_p)
	{	::soap_default___tempuri__Divide(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Divide * soap_new_set___tempuri__Divide(
	struct soap *soap,
	_tempuri__Divide *tempuri__Divide)
{
	struct __tempuri__Divide *_p = ::soap_new___tempuri__Divide(soap);
	if (_p)
	{	::soap_default___tempuri__Divide(soap, _p);
		_p->tempuri__Divide = tempuri__Divide;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Divide(struct soap*, const struct __tempuri__Divide *, const char*, const char*);

inline int soap_write___tempuri__Divide(struct soap *soap, struct __tempuri__Divide const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__Divide(soap, p), 0) || ::soap_put___tempuri__Divide(soap, p, "-tempuri:Divide", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Divide(struct soap *soap, const char *URL, struct __tempuri__Divide const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Divide(soap, p), 0) || ::soap_put___tempuri__Divide(soap, p, "-tempuri:Divide", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__Divide(struct soap *soap, const char *URL, struct __tempuri__Divide const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Divide(soap, p), 0) || ::soap_put___tempuri__Divide(soap, p, "-tempuri:Divide", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Divide(struct soap *soap, const char *URL, struct __tempuri__Divide const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Divide(soap, p), 0) || ::soap_put___tempuri__Divide(soap, p, "-tempuri:Divide", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Divide * SOAP_FMAC4 soap_get___tempuri__Divide(struct soap*, struct __tempuri__Divide *, const char*, const char*);

inline int soap_read___tempuri__Divide(struct soap *soap, struct __tempuri__Divide *p)
{
	if (p)
	{	::soap_default___tempuri__Divide(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__Divide(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Divide(struct soap *soap, const char *URL, struct __tempuri__Divide *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__Divide(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__Divide(struct soap *soap, struct __tempuri__Divide *p)
{
	if (::soap_read___tempuri__Divide(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__Multiply_DEFINED
#define SOAP_TYPE___tempuri__Multiply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Multiply(struct soap*, struct __tempuri__Multiply *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Multiply(struct soap*, const struct __tempuri__Multiply *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Multiply(struct soap*, const char*, int, const struct __tempuri__Multiply *, const char*);
SOAP_FMAC3 struct __tempuri__Multiply * SOAP_FMAC4 soap_in___tempuri__Multiply(struct soap*, const char*, struct __tempuri__Multiply *, const char*);
SOAP_FMAC1 struct __tempuri__Multiply * SOAP_FMAC2 soap_instantiate___tempuri__Multiply(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Multiply * soap_new___tempuri__Multiply(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Multiply(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Multiply * soap_new_req___tempuri__Multiply(
	struct soap *soap)
{
	struct __tempuri__Multiply *_p = ::soap_new___tempuri__Multiply(soap);
	if (_p)
	{	::soap_default___tempuri__Multiply(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Multiply * soap_new_set___tempuri__Multiply(
	struct soap *soap,
	_tempuri__Multiply *tempuri__Multiply)
{
	struct __tempuri__Multiply *_p = ::soap_new___tempuri__Multiply(soap);
	if (_p)
	{	::soap_default___tempuri__Multiply(soap, _p);
		_p->tempuri__Multiply = tempuri__Multiply;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Multiply(struct soap*, const struct __tempuri__Multiply *, const char*, const char*);

inline int soap_write___tempuri__Multiply(struct soap *soap, struct __tempuri__Multiply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__Multiply(soap, p), 0) || ::soap_put___tempuri__Multiply(soap, p, "-tempuri:Multiply", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Multiply(struct soap *soap, const char *URL, struct __tempuri__Multiply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Multiply(soap, p), 0) || ::soap_put___tempuri__Multiply(soap, p, "-tempuri:Multiply", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__Multiply(struct soap *soap, const char *URL, struct __tempuri__Multiply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Multiply(soap, p), 0) || ::soap_put___tempuri__Multiply(soap, p, "-tempuri:Multiply", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Multiply(struct soap *soap, const char *URL, struct __tempuri__Multiply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Multiply(soap, p), 0) || ::soap_put___tempuri__Multiply(soap, p, "-tempuri:Multiply", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Multiply * SOAP_FMAC4 soap_get___tempuri__Multiply(struct soap*, struct __tempuri__Multiply *, const char*, const char*);

inline int soap_read___tempuri__Multiply(struct soap *soap, struct __tempuri__Multiply *p)
{
	if (p)
	{	::soap_default___tempuri__Multiply(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__Multiply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Multiply(struct soap *soap, const char *URL, struct __tempuri__Multiply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__Multiply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__Multiply(struct soap *soap, struct __tempuri__Multiply *p)
{
	if (::soap_read___tempuri__Multiply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__Subtract_DEFINED
#define SOAP_TYPE___tempuri__Subtract_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Subtract(struct soap*, struct __tempuri__Subtract *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Subtract(struct soap*, const struct __tempuri__Subtract *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Subtract(struct soap*, const char*, int, const struct __tempuri__Subtract *, const char*);
SOAP_FMAC3 struct __tempuri__Subtract * SOAP_FMAC4 soap_in___tempuri__Subtract(struct soap*, const char*, struct __tempuri__Subtract *, const char*);
SOAP_FMAC1 struct __tempuri__Subtract * SOAP_FMAC2 soap_instantiate___tempuri__Subtract(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Subtract * soap_new___tempuri__Subtract(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Subtract(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Subtract * soap_new_req___tempuri__Subtract(
	struct soap *soap)
{
	struct __tempuri__Subtract *_p = ::soap_new___tempuri__Subtract(soap);
	if (_p)
	{	::soap_default___tempuri__Subtract(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Subtract * soap_new_set___tempuri__Subtract(
	struct soap *soap,
	_tempuri__Subtract *tempuri__Subtract)
{
	struct __tempuri__Subtract *_p = ::soap_new___tempuri__Subtract(soap);
	if (_p)
	{	::soap_default___tempuri__Subtract(soap, _p);
		_p->tempuri__Subtract = tempuri__Subtract;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Subtract(struct soap*, const struct __tempuri__Subtract *, const char*, const char*);

inline int soap_write___tempuri__Subtract(struct soap *soap, struct __tempuri__Subtract const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__Subtract(soap, p), 0) || ::soap_put___tempuri__Subtract(soap, p, "-tempuri:Subtract", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Subtract(struct soap *soap, const char *URL, struct __tempuri__Subtract const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Subtract(soap, p), 0) || ::soap_put___tempuri__Subtract(soap, p, "-tempuri:Subtract", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__Subtract(struct soap *soap, const char *URL, struct __tempuri__Subtract const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Subtract(soap, p), 0) || ::soap_put___tempuri__Subtract(soap, p, "-tempuri:Subtract", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Subtract(struct soap *soap, const char *URL, struct __tempuri__Subtract const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Subtract(soap, p), 0) || ::soap_put___tempuri__Subtract(soap, p, "-tempuri:Subtract", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Subtract * SOAP_FMAC4 soap_get___tempuri__Subtract(struct soap*, struct __tempuri__Subtract *, const char*, const char*);

inline int soap_read___tempuri__Subtract(struct soap *soap, struct __tempuri__Subtract *p)
{
	if (p)
	{	::soap_default___tempuri__Subtract(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__Subtract(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Subtract(struct soap *soap, const char *URL, struct __tempuri__Subtract *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__Subtract(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__Subtract(struct soap *soap, struct __tempuri__Subtract *p)
{
	if (::soap_read___tempuri__Subtract(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__Add_DEFINED
#define SOAP_TYPE___tempuri__Add_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Add(struct soap*, struct __tempuri__Add *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Add(struct soap*, const struct __tempuri__Add *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Add(struct soap*, const char*, int, const struct __tempuri__Add *, const char*);
SOAP_FMAC3 struct __tempuri__Add * SOAP_FMAC4 soap_in___tempuri__Add(struct soap*, const char*, struct __tempuri__Add *, const char*);
SOAP_FMAC1 struct __tempuri__Add * SOAP_FMAC2 soap_instantiate___tempuri__Add(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Add * soap_new___tempuri__Add(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Add(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Add * soap_new_req___tempuri__Add(
	struct soap *soap)
{
	struct __tempuri__Add *_p = ::soap_new___tempuri__Add(soap);
	if (_p)
	{	::soap_default___tempuri__Add(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Add * soap_new_set___tempuri__Add(
	struct soap *soap,
	_tempuri__Add *tempuri__Add)
{
	struct __tempuri__Add *_p = ::soap_new___tempuri__Add(soap);
	if (_p)
	{	::soap_default___tempuri__Add(soap, _p);
		_p->tempuri__Add = tempuri__Add;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Add(struct soap*, const struct __tempuri__Add *, const char*, const char*);

inline int soap_write___tempuri__Add(struct soap *soap, struct __tempuri__Add const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__Add(soap, p), 0) || ::soap_put___tempuri__Add(soap, p, "-tempuri:Add", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Add(struct soap *soap, const char *URL, struct __tempuri__Add const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Add(soap, p), 0) || ::soap_put___tempuri__Add(soap, p, "-tempuri:Add", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__Add(struct soap *soap, const char *URL, struct __tempuri__Add const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Add(soap, p), 0) || ::soap_put___tempuri__Add(soap, p, "-tempuri:Add", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Add(struct soap *soap, const char *URL, struct __tempuri__Add const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__Add(soap, p), 0) || ::soap_put___tempuri__Add(soap, p, "-tempuri:Add", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Add * SOAP_FMAC4 soap_get___tempuri__Add(struct soap*, struct __tempuri__Add *, const char*, const char*);

inline int soap_read___tempuri__Add(struct soap *soap, struct __tempuri__Add *p)
{
	if (p)
	{	::soap_default___tempuri__Add(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__Add(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Add(struct soap *soap, const char *URL, struct __tempuri__Add *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__Add(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__Add(struct soap *soap, struct __tempuri__Add *p)
{
	if (::soap_read___tempuri__Add(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__Divide_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__Divide_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Divide(struct soap*, _tempuri__Divide *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Divide(struct soap*, const char *, int, _tempuri__Divide *const*, const char *);
SOAP_FMAC3 _tempuri__Divide ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Divide(struct soap*, const char*, _tempuri__Divide **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Divide(struct soap*, _tempuri__Divide *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__Divide ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Divide(struct soap*, _tempuri__Divide **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__Multiply_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__Multiply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Multiply(struct soap*, _tempuri__Multiply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Multiply(struct soap*, const char *, int, _tempuri__Multiply *const*, const char *);
SOAP_FMAC3 _tempuri__Multiply ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Multiply(struct soap*, const char*, _tempuri__Multiply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Multiply(struct soap*, _tempuri__Multiply *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__Multiply ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Multiply(struct soap*, _tempuri__Multiply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__Subtract_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__Subtract_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Subtract(struct soap*, _tempuri__Subtract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Subtract(struct soap*, const char *, int, _tempuri__Subtract *const*, const char *);
SOAP_FMAC3 _tempuri__Subtract ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Subtract(struct soap*, const char*, _tempuri__Subtract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Subtract(struct soap*, _tempuri__Subtract *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__Subtract ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Subtract(struct soap*, _tempuri__Subtract **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__Add_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__Add_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Add(struct soap*, _tempuri__Add *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Add(struct soap*, const char *, int, _tempuri__Add *const*, const char *);
SOAP_FMAC3 _tempuri__Add ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Add(struct soap*, const char*, _tempuri__Add **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Add(struct soap*, _tempuri__Add *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__Add ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Add(struct soap*, _tempuri__Add **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
