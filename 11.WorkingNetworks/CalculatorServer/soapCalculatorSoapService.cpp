/* soapCalculatorSoapService.cpp
   Generated by gSOAP 2.8.97 for calculator.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapCalculatorSoapService.h"

CalculatorSoapService::CalculatorSoapService()
{	this->soap = soap_new();
	this->soap_own = true;
	CalculatorSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CalculatorSoapService::CalculatorSoapService(const CalculatorSoapService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

CalculatorSoapService::CalculatorSoapService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	CalculatorSoapService_init(_soap->imode, _soap->omode);
}

CalculatorSoapService::CalculatorSoapService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	CalculatorSoapService_init(iomode, iomode);
}

CalculatorSoapService::CalculatorSoapService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	CalculatorSoapService_init(imode, omode);
}

CalculatorSoapService::~CalculatorSoapService()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void CalculatorSoapService::CalculatorSoapService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "tempuri", "http://tempuri.org/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void CalculatorSoapService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void CalculatorSoapService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	CalculatorSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
CalculatorSoapService *CalculatorSoapService::copy()
{	CalculatorSoapService *dup = SOAP_NEW_UNMANAGED(CalculatorSoapService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

CalculatorSoapService& CalculatorSoapService::operator=(const CalculatorSoapService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int CalculatorSoapService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int CalculatorSoapService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int CalculatorSoapService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int CalculatorSoapService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int CalculatorSoapService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int CalculatorSoapService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void CalculatorSoapService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void CalculatorSoapService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *CalculatorSoapService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void CalculatorSoapService::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *CalculatorSoapService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int CalculatorSoapService::run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int CalculatorSoapService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET CalculatorSoapService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET CalculatorSoapService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int CalculatorSoapService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int CalculatorSoapService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tempuri__Add(struct soap*, CalculatorSoapService*);
static int serve___tempuri__Subtract(struct soap*, CalculatorSoapService*);
static int serve___tempuri__Multiply(struct soap*, CalculatorSoapService*);
static int serve___tempuri__Divide(struct soap*, CalculatorSoapService*);
static int serve___tempuri__Add_(struct soap*, CalculatorSoapService*);
static int serve___tempuri__Subtract_(struct soap*, CalculatorSoapService*);
static int serve___tempuri__Multiply_(struct soap*, CalculatorSoapService*);
static int serve___tempuri__Divide_(struct soap*, CalculatorSoapService*);

int CalculatorSoapService::dispatch()
{	return dispatch(this->soap);
}

int CalculatorSoapService::dispatch(struct soap* soap)
{
	CalculatorSoapService_init(soap->imode, soap->omode);
	(void)soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Add"))
		return serve___tempuri__Add(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Subtract"))
		return serve___tempuri__Subtract(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Multiply"))
		return serve___tempuri__Multiply(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Divide"))
		return serve___tempuri__Divide(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Add"))
		return serve___tempuri__Add_(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Subtract"))
		return serve___tempuri__Subtract_(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Multiply"))
		return serve___tempuri__Multiply_(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tempuri:Divide"))
		return serve___tempuri__Divide_(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___tempuri__Add(struct soap *soap, CalculatorSoapService *service)
{	struct __tempuri__Add soap_tmp___tempuri__Add;
	_tempuri__AddResponse tempuri__AddResponse;
	tempuri__AddResponse.soap_default(soap);
	soap_default___tempuri__Add(soap, &soap_tmp___tempuri__Add);
	if (!soap_get___tempuri__Add(soap, &soap_tmp___tempuri__Add, "-tempuri:Add", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Add(soap_tmp___tempuri__Add.tempuri__Add, tempuri__AddResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tempuri__AddResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__AddResponse.soap_put(soap, "tempuri:AddResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__AddResponse.soap_put(soap, "tempuri:AddResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Subtract(struct soap *soap, CalculatorSoapService *service)
{	struct __tempuri__Subtract soap_tmp___tempuri__Subtract;
	_tempuri__SubtractResponse tempuri__SubtractResponse;
	tempuri__SubtractResponse.soap_default(soap);
	soap_default___tempuri__Subtract(soap, &soap_tmp___tempuri__Subtract);
	if (!soap_get___tempuri__Subtract(soap, &soap_tmp___tempuri__Subtract, "-tempuri:Subtract", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Subtract(soap_tmp___tempuri__Subtract.tempuri__Subtract, tempuri__SubtractResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tempuri__SubtractResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__SubtractResponse.soap_put(soap, "tempuri:SubtractResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__SubtractResponse.soap_put(soap, "tempuri:SubtractResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Multiply(struct soap *soap, CalculatorSoapService *service)
{	struct __tempuri__Multiply soap_tmp___tempuri__Multiply;
	_tempuri__MultiplyResponse tempuri__MultiplyResponse;
	tempuri__MultiplyResponse.soap_default(soap);
	soap_default___tempuri__Multiply(soap, &soap_tmp___tempuri__Multiply);
	if (!soap_get___tempuri__Multiply(soap, &soap_tmp___tempuri__Multiply, "-tempuri:Multiply", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Multiply(soap_tmp___tempuri__Multiply.tempuri__Multiply, tempuri__MultiplyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tempuri__MultiplyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__MultiplyResponse.soap_put(soap, "tempuri:MultiplyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__MultiplyResponse.soap_put(soap, "tempuri:MultiplyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Divide(struct soap *soap, CalculatorSoapService *service)
{	struct __tempuri__Divide soap_tmp___tempuri__Divide;
	_tempuri__DivideResponse tempuri__DivideResponse;
	tempuri__DivideResponse.soap_default(soap);
	soap_default___tempuri__Divide(soap, &soap_tmp___tempuri__Divide);
	if (!soap_get___tempuri__Divide(soap, &soap_tmp___tempuri__Divide, "-tempuri:Divide", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Divide(soap_tmp___tempuri__Divide.tempuri__Divide, tempuri__DivideResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tempuri__DivideResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__DivideResponse.soap_put(soap, "tempuri:DivideResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__DivideResponse.soap_put(soap, "tempuri:DivideResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Add_(struct soap *soap, CalculatorSoapService *service)
{	struct __tempuri__Add_ soap_tmp___tempuri__Add_;
	_tempuri__AddResponse tempuri__AddResponse;
	tempuri__AddResponse.soap_default(soap);
	soap_default___tempuri__Add_(soap, &soap_tmp___tempuri__Add_);
	if (!soap_get___tempuri__Add_(soap, &soap_tmp___tempuri__Add_, "-tempuri:Add", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Add_(soap_tmp___tempuri__Add_.tempuri__Add, tempuri__AddResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tempuri__AddResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__AddResponse.soap_put(soap, "tempuri:AddResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__AddResponse.soap_put(soap, "tempuri:AddResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Subtract_(struct soap *soap, CalculatorSoapService *service)
{	struct __tempuri__Subtract_ soap_tmp___tempuri__Subtract_;
	_tempuri__SubtractResponse tempuri__SubtractResponse;
	tempuri__SubtractResponse.soap_default(soap);
	soap_default___tempuri__Subtract_(soap, &soap_tmp___tempuri__Subtract_);
	if (!soap_get___tempuri__Subtract_(soap, &soap_tmp___tempuri__Subtract_, "-tempuri:Subtract", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Subtract_(soap_tmp___tempuri__Subtract_.tempuri__Subtract, tempuri__SubtractResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tempuri__SubtractResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__SubtractResponse.soap_put(soap, "tempuri:SubtractResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__SubtractResponse.soap_put(soap, "tempuri:SubtractResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Multiply_(struct soap *soap, CalculatorSoapService *service)
{	struct __tempuri__Multiply_ soap_tmp___tempuri__Multiply_;
	_tempuri__MultiplyResponse tempuri__MultiplyResponse;
	tempuri__MultiplyResponse.soap_default(soap);
	soap_default___tempuri__Multiply_(soap, &soap_tmp___tempuri__Multiply_);
	if (!soap_get___tempuri__Multiply_(soap, &soap_tmp___tempuri__Multiply_, "-tempuri:Multiply", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Multiply_(soap_tmp___tempuri__Multiply_.tempuri__Multiply, tempuri__MultiplyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tempuri__MultiplyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__MultiplyResponse.soap_put(soap, "tempuri:MultiplyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__MultiplyResponse.soap_put(soap, "tempuri:MultiplyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Divide_(struct soap *soap, CalculatorSoapService *service)
{	struct __tempuri__Divide_ soap_tmp___tempuri__Divide_;
	_tempuri__DivideResponse tempuri__DivideResponse;
	tempuri__DivideResponse.soap_default(soap);
	soap_default___tempuri__Divide_(soap, &soap_tmp___tempuri__Divide_);
	if (!soap_get___tempuri__Divide_(soap, &soap_tmp___tempuri__Divide_, "-tempuri:Divide", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Divide_(soap_tmp___tempuri__Divide_.tempuri__Divide, tempuri__DivideResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tempuri__DivideResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__DivideResponse.soap_put(soap, "tempuri:DivideResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__DivideResponse.soap_put(soap, "tempuri:DivideResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
